{"version":3,"sources":["StartGame.jsx","ValidWords.jsx","Guesses.jsx","MakeGuess.jsx","App.jsx","services.js","serviceWorker.js","index.js"],"names":["StartGame","_ref","startGame","react_default","a","createElement","onClick","ValidWords","wordList","words","map","word","key","Guesses","guessList","guesses","result","guess","MakeGuess","submitGuess","updateGuess","disabled","onChange","e","target","value","onKeyPress","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","gameId","bind","assertThisInitialized","setState","_this2","fetch","method","catch","err","Promise","reject","then","response","ok","json","info","id","concat","_this3","makeGuess","results","toConsumableArray","_this4","className","src_StartGame","src_ValidWords","src_Guesses","src_MakeGuess","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1bb590d5.chunk.js","sourcesContent":["import React from 'react';\n\nconst StartGame = ({ startGame }) => {\n  return (\n    <div>\n      <button onClick={startGame} >Start Game</button>\n    </div>\n  );\n};\n\nexport default StartGame;\n","import React from 'react';\n\nconst ValidWords = ({\n  words\n}) => {\n  const wordList = words.map( word => <li key={word}>{word}</li> );\n  return (\n    <div>\n      <ul>\n        {wordList}\n      </ul>\n    </div>\n  );\n};\n\nexport default ValidWords;\n\n","import React from 'react';\n\nconst Guesses = ({ guesses } ) => {\n  const guessList = guesses.map( result => <li key={result.guess}><span>{result.guess}</span>: <span>{result.result}</span></li> );\n  return (\n    <div>\n      <ul>\n        {guessList}\n      </ul>\n    </div>\n  );\n};\n\nexport default Guesses;\n\n","import React from 'react';\n\nconst MakeGuess = ({\n  submitGuess,\n  updateGuess,\n  disabled,\n  guess\n}) => {\n  return (\n    <div>\n      <input\n        onChange={\n          e => {\n            updateGuess(e.target.value);\n          }\n        }\n        onKeyPress={\n          e => {\n            if(e.key === 'Enter') {\n              submitGuess(guess);\n            }\n          }\n        }\n        disabled={disabled}\n        value={guess}\n      />\n      <button\n        disabled={disabled}\n        onClick={ e => submitGuess(guess) }\n      >Guess</button>\n    </div>\n  );\n};\n\nexport default MakeGuess;\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport StartGame from './StartGame';\nimport ValidWords from './ValidWords';\nimport Guesses from './Guesses';\nimport MakeGuess from './MakeGuess';\nimport { getGameId, loadWords, makeGuess } from './services';\n\n// X Start game button\n// List of valid words (pull from service on page load)\n// List of guesses and their results\n// X input for a guess\n// X button to make the guess\n// X SPA-only\n// X REST services for the details\n// X Never send the valid word to the client until it has been guessed\n// X Making a guess is disabled until a game has started\n// A guess once made will be shown in the list of guesses and results\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameId: null,\n      guess: '',\n      guesses: [],\n      words: [],\n    };\n    this.startGame = this.startGame.bind(this);\n    this.submitGuess = this.submitGuess.bind(this);\n    this.updateGuess = this.updateGuess.bind(this);\n  }\n\n  updateGuess(guess) {\n    this.setState({\n      guess,\n    });\n  }\n\n  startGame() {\n    getGameId()\n    .then( info => {\n      this.setState({\n        gameId: info.id,\n      });\n    })\n    .catch( err => `do something real with ${err}` );\n  }\n\n  submitGuess(guess) {\n    guess = guess || this.state.guess;\n    makeGuess({ id: this.state.gameId, guess })\n    .then( results => {\n      this.setState({\n        guesses: [ ...this.state.guesses, { guess, result: results.result}],\n      });\n    })\n    .catch( err => `do something real with ${err}` );\n  }\n\n  componentDidMount() {\n    loadWords()\n    .then( words => {\n      this.setState({\n        words\n      });\n    })\n    .catch( err => `do something real with ${err}` );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <StartGame startGame={this.startGame}/>\n        <ValidWords words={this.state.words}/>\n        <Guesses guesses={this.state.guesses}/>\n        <MakeGuess\n          disabled={!this.state.gameId}\n          submitGuess={this.submitGuess}\n          updateGuess={this.updateGuess}\n          guess={this.state.guess}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export const makeGuess = ({ id, guess }) => {\n  return fetch(`/game/${id}/${guess}`)\n  .catch( err => Promise.reject('you should have error handling') )\n  .then( response => {\n    if(response.ok) {\n      return response.json();\n    }\n    return Promise.reject('you should have MORE error handling');\n  })\n};\n\nexport const loadWords = () => {\n  return fetch('/words')\n  .catch( err => Promise.reject('you should have error handling') )\n  .then( response => {\n    if(response.ok) {\n      return response.json();\n    }\n    return Promise.reject('you should have MORE error handling');\n  })\n};\n\nexport const getGameId = () => {\n  return fetch('/game', {\n    method: 'POST',\n  })\n  .catch( err => Promise.reject('you should have error handling') )\n  .then( response => {\n    if(response.ok) {\n      return response.json();\n    }\n    return Promise.reject('you should have MORE error handling');\n  });\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}